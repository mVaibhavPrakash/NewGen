{"version":3,"file":"src_Clients_EditorClient_src_components_bulkpage_BlogBulkUpload_jsx.clientbundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAFA;AADA;AAFA;AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;;AAKA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAFA;AAMA;AAZA;AAAA;;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;;AAkBA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAFA;AAOA;AA1BA;AAAA;AA6BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAHA;AAlCA;AAyCA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;ACTA;;;;;;;;;;;;ACAA","sources":["webpack://newgen/./src/Clients/EditorClient/src/components/bulkpage/BlogBulkUpload.jsx","webpack://newgen/./src/Clients/LandingpageClient/src/components/Navbar.jsx","webpack://newgen/./src/Clients/LandingpageClient/src/js/click.js","webpack://newgen/./src/Clients/EditorClient/src/css/blogbulkupload.css?eae0","webpack://newgen/./src/Clients/LandingpageClient/src/css/Navbar.css?091a"],"sourcesContent":["import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDownload } from '@fortawesome/free-solid-svg-icons'\nimport Navbar from '../../../../LandingpageClient/src/components/Navbar'\nimport '../../css/blogbulkupload.css'\n\nconst BlogBulkUpload = () => {\n  return (\n    <div className='blog-head'>\n      <Navbar/>\n      <div className='blog-bulk-div'>\n        <div className='blog-bulk-content'>\n          <FontAwesomeIcon icon={faDownload} className='download-icon'/>\n          <div className='blog-bulk-input'>\n            <input className='blog-bulk-file' type='file'/>\n            <input className='blog-bulk-submit' type='submit' value='Submit'/>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default BlogBulkUpload","import { useEffect, useState} from 'react'\nimport { Link, Navigate, useNavigate} from 'react-router-dom'\nimport { useSelector,useDispatch } from 'react-redux'\nimport img from '../../../../../public/img/newgen.png'\nimport '../css/Navbar.css'\nimport click from '../js/click'\nimport {setLoggedIn} from '../../../../redux/slices/authSlice'\nimport { setUser } from '../../../../redux/slices/authSlice'\nimport { useRef } from 'react'\n\nconst logout = (e,dispatch,navigate) =>{\n    e.preventDefault()\n    dispatch(setLoggedIn())\n    navigate('/')\n}\n\nconst Navbar = () => {\n\n    const [toggle,setToggle] = useState('');\n    const User = useSelector((state) => state.auth)\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const dropbtnref = useRef(null);\n    useEffect(()=>{\n        const userData = JSON.parse(localStorage.getItem('userData'))\n        if(User.username==='' && userData){\n            dispatch(setUser({username:userData.username,firstname:userData.firstname}))\n            dispatch(setLoggedIn())\n        }\n        dropbtnref.current.addEventListener('click',()=>{\n            navigate('/blog/new')\n        })\n    },[])\n    return (\n        <nav className='lpage-nav'>\n            <div className=\"lpage-logo lpage-navbarLeft\">\n                <img id=\"lpage-navbarCompanyLogo\" src={img} alt='img'/>\n            </div>\n            <Link to={'/'} className='lpage-a' id=\"lpage-home\" >Home</Link>\n            <div className={`lpage-navbarRight${toggle}`}>\n                {   \n                    /*!User.isLoggedIn ? */<Link to={'/auth/signup'} className='lpage-a' id=\"lpage-about\">Signup</Link>/*:''*/\n                }\n                {\n                    /*User.profileCreated ?*/\n                    <div className=\"dropdown\" >\n                            <span className=\"dropbtn\" id='btn-blog' ref={dropbtnref}>Blogs</span>\n                            <div className=\"dropdown-content\" id='drp-blog' >\n                                <Link to={'/blog/new'}>Create New</Link>\n                                <Link to={'/blog/bulkupload'} >Bulk Upload</Link>\n                            </div>\n                    </div> /*: ''*/\n                }\n                {   \n                    /*!User.isLoggedIn ? */<Link to={'/auth/login'} className='lpage-a' id=\"lpage-login\">Login</Link> /*: ''*/\n                }\n                {\n                   /* User.isLoggedIn ?*/\n                        <div className=\"dropdown\" id='dropdown-btn' >\n                            <span className=\"dropbtn\" id='lpage-profile'>VP</span>\n                            <div className=\"dropdown-content\">\n                                <Link to={'/username'} className='lpage-a'>Profile</Link>\n                                <Link to={'/dashboard'} className='lpage-a' >Dashboard</Link>\n                                <Link to={'/'} className='lpage-a' onClick={e => logout(e,dispatch,navigate)}>Logout</Link>\n                            </div>\n                        </div> /*: ''*/\n                }\n            </div>\n            <div className=\"lpage-navbarButton\" onClick={e=>{click(e,toggle,setToggle)}}>\n                <span id='lpage-span1'></span>\n                <span id='lpage-span2'></span>\n                <span id='lpage-span3'></span>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n","const click = (e, toggle, setToggle) => {\n  e.preventDefault()\n  if (toggle === '') {\n    setToggle('Active')\n  } else {\n    setToggle('')\n  }\n}\n\nexport default click\n","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}